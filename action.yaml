name: 'Syncoor Test'
description: 'Run Ethereum client synchronization tests using syncoor'
author: 'ethpandaops'

inputs:
  github-token:
    description: 'GitHub token for API access' # You can just provide ${{ secrets.GITHUB_TOKEN }}
    required: true

  syncoor-image:
    description: 'Docker image for syncoor (e.g., docker.ethquokkaops.io/dh/ethpandaops/syncoor:master). Ignored if git-ref is provided.'
    required: false
    default: 'docker.ethquokkaops.io/dh/ethpandaops/syncoor:master'

  image:
    description: 'Docker image for syncoor (e.g., ghcr.io/ethpandaops/syncoor:latest). Ignored if git-ref is provided.'
    required: false
    default: 'ghcr.io/ethpandaops/syncoor:master'

  git-ref:
    description: 'Git branch or commit hash to build the image from. If provided, will clone and build instead of using pre-built image.'
    required: false
    default: ''

  repository:
    description: 'Git repository URL to clone from when using git-ref'
    required: false
    default: 'https://github.com/ethpandaops/syncoor.git'

  run-tests:
    description: 'Run tests. Useful for generating report index only. There you can set it to false and run the action again to generate the index.'
    required: false
    default: 'true'

  # Syncoor arguments
  check-interval:
    description: 'Interval in seconds between sync status checks'
    required: false
    default: '10s'

  run-timeout:
    description: 'Timeout in minutes for network startup'
    required: false
    default: '60m'

  client-logs:
    description: 'Output EL and CL client logs to stdout'
    required: false
    default: 'false'

  el-client:
    description: 'Execution layer client type (geth, besu, nethermind, erigon, reth)'
    required: false
    default: 'geth'

  cl-client:
    description: 'Consensus layer client type (lighthouse, teku, prysm, nimbus, lodestar, grandine)'
    required: false
    default: 'teku'

  el-image:
    description: 'Execution layer client image (optional)'
    required: false
    default: ''

  cl-image:
    description: 'Consensus layer client image (optional)'
    required: false
    default: ''

  el-extra-args:
    description: 'Extra arguments for execution layer client (optional)'
    required: false
    default: ''

  cl-extra-args:
    description: 'Extra arguments for consensus layer client (optional)'
    required: false
    default: ''

  network:
    description: 'Network to connect to (e.g., hoodi, sepolia, mainnet)'
    required: false
    default: 'hoodi'

  enclave:
    description: 'Enclave name (optional - defaults to "sync-test"'
    required: false
    default: 'sync-test'

  report-dir:
    description: 'Directory to save reports'
    required: false
    default: './reports'

  log-level:
    description: 'Log level (panic, fatal, error, warn, info, debug, trace)'
    required: false
    default: 'info'

  log-force-colors:
    description: 'Force colored output in logs'
    required: false
    default: 'false'


  labels:
    description: 'Comma-separated labels in key=value format (e.g., "test=sync,env=ci")'
    required: false
    default: ''

  server:
    description: 'Centralized server URL (e.g., https://api.syncoor.example)'
    required: false
    default: ''

  server-auth:
    description: 'Bearer token for server authentication'
    required: false
    default: ''

  # Ethereum network configuration
  enable-supernodes:
    description: 'Enable supernodes (should only be used with peerdas)'
    required: false
    default: 'false'

  checkpoint-sync-enabled:
    description: 'Enable checkpoint sync across the network'
    required: false
    default: 'true'

  checkpoint-sync-url:
    description: 'Checkpoint sync URL (e.g., https://checkpoint-sync.sepolia.ethpandaops.io/)'
    required: false
    default: ''

  # Github artifacts upload
  upload-artifacts:
    description: 'Whether to upload test reports as artifacts'
    required: false
    default: 'true'

  artifact-retention-days-test-report:
    description: 'Number of days to retain test report artifacts'
    required: false
    default: '30'

  artifact-retention-days-enclave-dump:
    description: 'Number of days to retain enclave dump artifacts'
    required: false
    default: '7'

  ## S3 upload using rclone
  s3-upload:
    description: 'Upload test results to S3'
    required: false
    default: 'false'

  s3-bucket:
    description: 'S3 bucket name'
    required: false
    type: string

  s3-path:
    description: 'Path prefix in S3 bucket'
    required: false
    type: string
    default: ''

  s3-index-generate:
    description: 'Generate index.json file in S3 bucket after test run'
    required: false
    default: 'false'

  rclone-config:
    description: 'Rclone config file'
    required: false
    type: string
    default: '' # Should be base64 encoded. Example: base64 -w 0 rclone.conf

  rclone-version:
    description: 'Rclone version to use'
    required: false
    type: string
    default: 'latest'

outputs:
  report-path:
    description: 'Path to the generated report'
    value: ${{ steps.run-test.outputs.report-path }}
  main-report-file:
    description: 'Name of the main report JSON file (without .json extension)'
    value: ${{ steps.run-test.outputs.main-report-file }}

runs:
  using: 'composite'
  steps:
    - name: Checkout and build Syncoor
      if: inputs.git-ref != ''
      shell: bash
      run: |
        # Clone the repository
        echo "Cloning repository from ${{ inputs.repository }} at ref ${{ inputs.git-ref }}"
        git clone ${{ inputs.repository }} syncoor-build
        cd syncoor-build
        git checkout ${{ inputs.git-ref }}

        # Build the Docker image
        echo "Building Docker image..."
        docker build -t syncoor:local .
        cd ..

        # Clean up
        rm -rf syncoor-build

    - name: Setup Rclone for S3 upload
      if: ${{ inputs.s3-upload == 'true' }}
      uses: AnimMouse/setup-rclone@0d99fa3878a334d3e307c1a8372ad55550fdaea7 # v1.11.0
      with:
        rclone_config: ${{ inputs.rclone-config }}
        version: ${{ inputs.rclone-version }}

    - name: Check S3 connectivity before running test
      if: ${{ inputs.s3-upload == 'true' }}
      shell: bash
      run: |
        rclone touch s3:${{ inputs.s3-bucket }}/${{ inputs.s3-path }}/healthcheck.txt

    - name: Make sure kurtosis engine is started
      if: ${{ inputs.run-tests == 'true' }}
      id: engine-start
      shell: bash
      run: |
        kurtosis engine start
        kurtosis engine status

    - name: Determine which image to use
      id: determine-image
      shell: bash
      run: |
        if [ -n "${{ inputs.git-ref }}" ]; then
          IMAGE="syncoor:local"
        elif [ -n "${{ inputs.syncoor-image }}" ]; then
          IMAGE="${{ inputs.syncoor-image }}"
        else
          IMAGE="${{ inputs.image }}"
        fi
        echo "image=$(echo ${IMAGE})" >> $GITHUB_OUTPUT

    - name: Get Job ID from GH API
      if: ${{ inputs.run-tests == 'true' }}
      id: get-job-id
      shell: bash
      env:
        GH_TOKEN: ${{ inputs.github-token }}
      run: |
        jobs=$(gh api repos/${{ github.repository }}/actions/runs/${{ github.run_id}}/attempts/${{ github.run_attempt }}/jobs)
        job_id=$(echo $jobs | jq -r '.jobs[] | select(.runner_name=="${{ runner.name }}") | .id')
        echo "job_id=$job_id" >> $GITHUB_OUTPUT

    - name: Run Syncoor test
      if: ${{ inputs.run-tests == 'true' }}
      id: run-test
      shell: bash
      run: |
        IMAGE=$(echo ${{ steps.determine-image.outputs.image }})

        # Build docker run command
        DOCKER_CMD="docker run --platform linux/amd64 --network=host --rm"

        # Add Docker socket mount for Kurtosis
        DOCKER_CMD="$DOCKER_CMD -v /var/run/docker.sock:/var/run/docker.sock"

        # Mount report directory
        DOCKER_CMD="$DOCKER_CMD -v ${{ github.workspace }}/${{ inputs.report-dir }}:/app/${{ inputs.report-dir }}"

        # Add the image
        DOCKER_CMD="$DOCKER_CMD $IMAGE"

        # Use 'sync' command
        DOCKER_CMD="$DOCKER_CMD sync"

        # Add CLI flags
        DOCKER_CMD="$DOCKER_CMD --check-interval=${{ inputs.check-interval }}"
        DOCKER_CMD="$DOCKER_CMD --run-timeout=${{ inputs.run-timeout }}"
        DOCKER_CMD="$DOCKER_CMD --el-client=${{ inputs.el-client }}"
        DOCKER_CMD="$DOCKER_CMD --cl-client=${{ inputs.cl-client }}"
        DOCKER_CMD="$DOCKER_CMD --network=${{ inputs.network }}"
        DOCKER_CMD="$DOCKER_CMD --report-dir=${{ inputs.report-dir }}"
        DOCKER_CMD="$DOCKER_CMD --log-level=${{ inputs.log-level }}"
        DOCKER_CMD="$DOCKER_CMD --enclave=${{ inputs.enclave }}"
        DOCKER_CMD="$DOCKER_CMD --log-force-colors=${{ inputs.log-force-colors }}"
        DOCKER_CMD="$DOCKER_CMD --client-logs=${{ inputs.client-logs }}"

        # Add optional parameters if provided
        if [ -n "${{ inputs.el-image }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --el-image=${{ inputs.el-image }}"
        fi

        if [ -n "${{ inputs.cl-image }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --cl-image=${{ inputs.cl-image }}"
        fi

        if [ -n "${{ inputs.el-extra-args }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --el-extra-args=\"${{ inputs.el-extra-args }}\""
        fi

        if [ -n "${{ inputs.cl-extra-args }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --cl-extra-args=\"${{ inputs.cl-extra-args }}\""
        fi

        # Add GitHub Actions context labels for traceability
        DOCKER_CMD="$DOCKER_CMD --label=github.run_id=${{ github.run_id }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.run_number=${{ github.run_number }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.job=${{ github.job }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.job_id=${{ steps.get-job-id.outputs.job_id }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.repository=${{ github.repository }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.workflow=\"${{ github.workflow }}\""
        DOCKER_CMD="$DOCKER_CMD --label=github.sha=${{ github.sha }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.actor=${{ github.actor }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.event_name=${{ github.event_name }}"
        DOCKER_CMD="$DOCKER_CMD --label=github.ref=${{ github.ref }}"

        # Add user-provided labels if provided
        if [ -n "${{ inputs.labels }}" ]; then
          IFS=',' read -ra LABEL_ARRAY <<< "${{ inputs.labels }}"
          for label in "${LABEL_ARRAY[@]}"; do
            DOCKER_CMD="$DOCKER_CMD --label=$label"
          done
        fi

        # Add server parameters if provided
        if [ -n "${{ inputs.server }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --server=\"${{ inputs.server }}\""
        fi

        if [ -n "${{ inputs.server-auth }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --server-auth=\"${{ inputs.server-auth }}\""
        fi

        # Add Ethereum network configuration parameters
        if [ "${{ inputs.enable-supernodes }}" = "true" ]; then
          DOCKER_CMD="$DOCKER_CMD --enable-supernodes"
        fi

        if [ "${{ inputs.checkpoint-sync-enabled }}" = "true" ]; then
          DOCKER_CMD="$DOCKER_CMD --checkpoint-sync-enabled"
        fi

        if [ -n "${{ inputs.checkpoint-sync-url }}" ]; then
          DOCKER_CMD="$DOCKER_CMD --checkpoint-sync-url=\"${{ inputs.checkpoint-sync-url }}\""
        fi

        # Execute the command
        echo "Running: $DOCKER_CMD"
        eval $DOCKER_CMD

        # Find the generated main.json file
        MAIN_JSON_FILE=$(basename $(find ${{ github.workspace }}/${{ inputs.report-dir }} -name "*.main.json" -type f | head -1) .json)

        # Set outputs
        echo "report-path=${{ github.workspace }}/${{ inputs.report-dir }}" >> $GITHUB_OUTPUT
        echo "main-report-file=$MAIN_JSON_FILE" >> $GITHUB_OUTPUT

    - name: Upload results to S3
      if: ${{ inputs.s3-upload == 'true' && inputs.run-tests == 'true' }}
      shell: bash
      run: |
        rclone copy --no-traverse ${{ inputs.report-dir }} s3:${{ inputs.s3-bucket }}/${{ inputs.s3-path }}

    - name: Generate report index and upload to S3
      if: ${{ inputs.s3-upload == 'true' && inputs.s3-index-generate == 'true' }}
      shell: bash
      run: |
        echo "Fetching results from S3"
        rclone copy --progress --transfers=100 --include "*.main.json" s3://${{ inputs.s3-bucket }}/${{ inputs.s3-path }} ${{ github.workspace }}/tmp_results

        # Get image from determine-image step
        IMAGE=$(echo ${{ steps.determine-image.outputs.image }})

        # Build docker run command
        DOCKER_CMD="docker run --platform linux/amd64 --rm"

        # Mount report directory
        DOCKER_CMD="$DOCKER_CMD -v ${{ github.workspace }}/tmp_results:/app/reports"

        # Add the image
        DOCKER_CMD="$DOCKER_CMD $IMAGE"

        # Use 'report-index' command
        DOCKER_CMD="$DOCKER_CMD report-index --report-dir /app/reports --output /app/reports/index.json"

        # Execute the command
        echo "Running: $DOCKER_CMD"
        eval $DOCKER_CMD

        echo "Upload index.json file to S3"
        rclone copy ${{ github.workspace }}/tmp_results/index.json s3:${{ inputs.s3-bucket }}/${{ inputs.s3-path }}/

    - name: Upload test reports
      uses: actions/upload-artifact@v4
      if: always() && inputs.upload-artifacts == 'true' && inputs.run-tests == 'true'
      with:
        name: ${{ inputs.network }}-${{ inputs.el-client }}-${{ inputs.cl-client }}-sync-report
        path: ${{ inputs.report-dir }}
        retention-days: ${{ inputs.artifact-retention-days-test-report }}

    - name: Get kurtosis enclave dump
      if: always() && inputs.upload-artifacts == 'true' && inputs.run-tests == 'true'
      id: enclave-dump
      shell: bash
      run: |
        kurtosis enclave dump ${{ inputs.enclave }} kurtosis-enclave-dump

    - name: Upload enclave dump
      uses: actions/upload-artifact@v4
      if: always() && inputs.upload-artifacts == 'true' && inputs.run-tests == 'true'
      with:
        name: ${{ inputs.network }}-${{ inputs.el-client }}-${{ inputs.cl-client }}-kurtosis-enclave-dump
        path: kurtosis-enclave-dump
        retention-days: ${{ inputs.artifact-retention-days-enclave-dump }}

    - name: Generate report markdown for Github Actions summary
      if: steps.run-test.outputs.main-report-file != ''
      shell: bash
      run: |
        # Get image from determine-image step
        IMAGE=$(echo ${{ steps.determine-image.outputs.image }})

        # Build docker run command
        DOCKER_CMD="docker run --platform linux/amd64 --rm"

        # Mount report file
        DOCKER_CMD="$DOCKER_CMD -v ${{ github.workspace }}/${{ inputs.report-dir }}:/app/${{ inputs.report-dir }}"

        # Add the image
        DOCKER_CMD="$DOCKER_CMD $IMAGE"

        # Use 'report-to-md' command
        DOCKER_CMD="$DOCKER_CMD report-to-md"
        DOCKER_CMD="$DOCKER_CMD --input /app/${{ inputs.report-dir }}/${{ steps.run-test.outputs.main-report-file }}.json"
        DOCKER_CMD="$DOCKER_CMD --output /app/${{ inputs.report-dir }}/${{ steps.run-test.outputs.main-report-file }}.md"

        # Execute the command
        echo "Running: $DOCKER_CMD"
        eval $DOCKER_CMD

    - name: Create GitHub Actions summary
      uses: Ma11hewThomas/github-markdown-builder@99c463efc8c49a2951bcc12bfd52de7ebb989c6f # v1.0.1
      if: steps.run-test.outputs.main-report-file != ''
      with:
        template-file-path: '${{ github.workspace }}/${{ inputs.report-dir }}/${{ steps.run-test.outputs.main-report-file }}.md'
        summary: true
